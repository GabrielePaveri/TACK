(asdf:operate 'asdf:load-op 'ae2zot)(use-package :trio-utils)
(define-tvar Z0_12 *real*)
(define-tvar Z1_12 *real*)
(ae2zot:zot 1000 (&&(&&(&&([=] (-V- Z0_12) (-V- Z0_12)) (&&(alwf (&&(<-> (||(&&(!! (yesterday (-P- H_12))) (-P- H_12)) (&&(yesterday (-P- H_12)) (!! (-P- H_12)))) (||([=] (-V- Z0_12) (-V- Z0_12)) ([=] (-V- Z1_12) (-V- Z1_12)))) (&&(-> ([=] (-V- Z0_12) (-V- Z0_12)) (next (release ([=] (-V- Z1_12) (-V- Z1_12)) ([>] (-V- Z0_12) (-V- Z0_12))))) (-> ([=] (-V- Z1_12) (-V- Z1_12)) (next (release ([=] (-V- Z0_12) (-V- Z0_12)) ([>] (-V- Z1_12) (-V- Z1_12)))))))) (&&(&&(alwf (||(next ([=] (-V- Z0_12) (-V- Z0_12))) (next ([>] (-V- Z0_12) (-V- Z0_12))))) (||(alwf (somf ([=] (-V- Z0_12) (-V- Z0_12)))) (somf (alwf ([>] (-V- Z0_12) (-V- Z0_12)))))) (&&(&&(alwf (||(next ([=] (-V- Z1_12) (-V- Z1_12))) (next ([>] (-V- Z1_12) (-V- Z1_12))))) (||(alwf (somf ([=] (-V- Z1_12) (-V- Z1_12)))) (somf (alwf ([>] (-V- Z1_12) (-V- Z1_12)))))) (&&([>=] (-V- Z0_12) (-V- Z0_12)) ([>=] (-V- Z1_12) (-V- Z1_12))))))) (alwf (&&(<-> (-P- P_12) (&&(-P- P_4) (-P- P_4))) (<-> (-P- H_12) (&&(-P- H_4) (-P- H_4))))))))

