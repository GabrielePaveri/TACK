(asdf:operate 'asdf:load-op 'ae2zot) (use-package :trio-utils)
(define-tvar z0_0 *real*)
(define-tvar H_0 *real*)
(define-tvar H_0 *real*)
(define-tvar H_0 *real*)
(define-tvar H_0 *real*)
(define-tvar z0_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar z0_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar z0_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar z0_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar z0_0 *real*)
(define-tvar z0_0 *real*)
(define-tvar z0_0 *real*)
(define-tvar z0_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar z0_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar H_0 *real*)
(define-tvar H_0 *real*)
(define-tvar True *real*)
(define-tvar H_1 *real*)
(define-tvar z0_0 *real*)
(define-tvar z0_0 *real*)
(define-tvar H_1 *real*)
(define-tvar H_1 *real*)
(define-tvar z0_0 *real*)
(define-tvar z0_1 *real*)
(define-tvar z1_1 *real*)
(define-tvar z1_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar H_0 *real*)
(define-tvar H_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar z0_1 *real*)
(define-tvar z1_1 *real*)
(define-tvar True *real*)
(define-tvar True *real*)
(define-tvar z0_0 *real*)
(define-tvar H_1 *real*)
(define-tvar H_1 *real*)
(define-tvar z0_0 *real*)
(define-tvar H_1 *real*)
(define-tvar H_1 *real*)
(define-tvar z0_1 *real*)
(define-tvar z1_1 *real*)
(define-tvar z0_0 *real*)
(define-tvar z1_0 *real*)
(define-tvar H_0 *real*)
(define-tvar H_0 *real*)
(define-tvar H_1 *real*)
(define-tvar H_1 *real*)
(define-tvar H_1 *real*)
(define-tvar H_1 *real*)
(define-tvar H_1 *real*)
(define-tvar H_1 *real*)
(define-tvar z0_1 *real*)
(define-tvar z1_1 *real*)
(defvar trio-spec ((&&(&&([=] (-V- z0_0) 0) (&&(alwf (&&(<-> (||(&&(!! (yesterday (-P- H_0))) (-P- H_0)) (&&(yesterday (-P- H_0)) (!! (-P- H_0)))) (||([=] (-V- z0_0) 0) ([=] (-V- z1_0) 0))) (&&(-> ([=] (-V- z0_0) 0) (next (release ([=] (-V- z1_0) 0) ([>] (-V- z0_0) 0)))) (-> ([=] (-V- z1_0) 0) (next (release ([=] (-V- z0_0) 0) ([>] (-V- z1_0) 0))))))) (&&(&&(alwf (||(next ([=] (-V- z0_0) 0)) (next ([>] (-V- z0_0) 0)))) (||(alwf (somf ([=] (-V- z0_0) 0))) (somf (alwf ([>] (-V- z0_0) 1000))))) (&&(&&(alwf (||(next ([=] (-V- z1_0) 0)) (next ([>] (-V- z1_0) 0)))) (||(alwf (somf ([=] (-V- z1_0) 0))) (somf (alwf ([>] (-V- z1_0) 1000))))) (&&([>=] (-V- z0_0) 0) ([>=] (-V- z1_0) 0)))))) (alwf (&&(<-> (&&(yesterday (-P- H_0)) (!! (-P- H_0))) (&&(!! (!! (yesterday (-P- True)))) (&&(&&(-P- H_1) (||(&&([=] (-V- z0_0) 0) (next (until ([>] (-V- z0_0) 0) (&&(&&(yesterday (-P- H_1)) (!! (-P- H_1))) (&&([=] (-V- z0_0) 1) (||([>] (-V- z0_1) 1) ([>] (-V- z1_1) 1))))))) (&&([=] (-V- z1_0) 0) (next (until ([>] (-V- z1_0) 0) (&&(&&(yesterday (-P- H_0)) (!! (-P- H_0))) (&&([=] (-V- z1_0) 1) (||([=] (-V- z1_0) 1) (||([>] (-V- z0_1) 1) ([>] (-V- z1_1) 1)))))))))) (&&(!! (yesterday (-P- True))) (until (||(!! (yesterday (-P- True))) ([>] (-V- z0_0) 0)) (&&(!! (&&(yesterday (-P- H_1)) (!! (-P- H_1)))) ([<=] (-V- z0_0) 1))))))) (&&(-> (&&(&&(yesterday (-P- H_1)) (!! (-P- H_1))) (||([>] (-V- z0_1) 1) ([>] (-V- z1_1) 1))) (||([=] (-V- z0_0) 1) ([=] (-V- z1_0) 1))) (<-> (&&(!! (yesterday (-P- H_0))) (-P- H_0)) (&&(&&(!! (yesterday (-P- H_1))) (-P- H_1)) (release (&&(yesterday (-P- H_1)) (!! (-P- H_1))) (!! (&&(&&(yesterday (-P- H_1)) (!! (-P- H_1))) (&&([<=] (-V- z0_1) 1) ([<=] (-V- z1_1) 1)))))))))))))

(e2zot:zot 10 trio-spec)