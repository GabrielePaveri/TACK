(asdf:operate 'asdf:load-op 'ae2zot)
(use-package :trio-utils)
(define-tvar Z1_1 *real*)
(define-tvar Z0_2 *real*)
(define-tvar Z1_0 *real*)
(define-tvar Z0_1 *real*)
(define-tvar Z1_2 *real*)
(define-tvar Now *real*)
(define-tvar Z0_0 *real*)
(ae2zot:zot 5 (&&(yesterday (&&(&&([=] (-V- Now) 0) (next (alwf ([>] (-V- Now) 0)))) (&&(&&(&&(&&(&&(&&([>=] (-V- Z1_1) 0) ([>=] (-V- Z0_2) 0)) ([>=] (-V- Z1_0) 0)) ([>=] (-V- Z0_1) 0)) ([>=] (-V- Z1_2) 0)) ([>=] (-V- Z0_0) 0)) (&&(-P- P_1) (&&(&&(alwf (&&(<-> (||(||(&&(!! (yesterday (-P- H_0))) (-P- H_0)) (||(&&(yesterday (!! (-P- H_0))) (&&(-P- P_0) (!! (-P- H_0)))) (&&(!! (yesterday (||  (-P- a) (!!(-P- a))))) (-P- P_0)))) (||(&&(!! (yesterday (!! (-P- H_0)))) (!! (-P- H_0))) (||(&&(yesterday (-P- H_0)) (&&(!! (-P- P_0)) (-P- H_0))) (&&(!! (yesterday (||  (-P- a) (!!(-P- a))))) (!! (-P- P_0)))))) (||([=] (-V- Z0_0) 0) ([=] (-V- Z1_0) 0))) (&&(-> ([=] (-V- Z0_0) 0) (next (release ([=] (-V- Z1_0) 0) ([>] (-V- Z0_0) 0)))) (-> ([=] (-V- Z1_0) 0) (next (release ([=] (-V- Z0_0) 0) ([>] (-V- Z1_0) 0))))))) (&&(alwf (&&(<-> (||(||(&&(!! (yesterday (-P- H_1))) (-P- H_1)) (||(&&(yesterday (!! (-P- H_1))) (&&(-P- P_1) (!! (-P- H_1)))) (&&(!! (yesterday (||  (-P- a) (!!(-P- a))))) (-P- P_1)))) (||(&&(!! (yesterday (!! (-P- H_1)))) (!! (-P- H_1))) (||(&&(yesterday (-P- H_1)) (&&(!! (-P- P_1)) (-P- H_1))) (&&(!! (yesterday (||  (-P- a) (!!(-P- a))))) (!! (-P- P_1)))))) (||([=] (-V- Z0_1) 0) ([=] (-V- Z1_1) 0))) (&&(-> ([=] (-V- Z0_1) 0) (next (release ([=] (-V- Z1_1) 0) ([>] (-V- Z0_1) 0)))) (-> ([=] (-V- Z1_1) 0) (next (release ([=] (-V- Z0_1) 0) ([>] (-V- Z1_1) 0))))))) (alwf (&&(<-> (-P- P_1) (<-> (-P- P_0) (-P- P_2))) (<-> (-P- H_1) (<-> (-P- H_0) (-P- H_2))))))) (&&(alwf (&&(<-> (||(||(&&(!! (yesterday (-P- H_2))) (-P- H_2)) (||(&&(yesterday (!! (-P- H_2))) (&&(-P- P_2) (!! (-P- H_2)))) (&&(!! (yesterday (||  (-P- a) (!!(-P- a))))) (-P- P_2)))) (||(&&(!! (yesterday (!! (-P- H_2)))) (!! (-P- H_2))) (||(&&(yesterday (-P- H_2)) (&&(!! (-P- P_2)) (-P- H_2))) (&&(!! (yesterday (||  (-P- a) (!!(-P- a))))) (!! (-P- P_2)))))) (||([=] (-V- Z0_2) 0) ([=] (-V- Z1_2) 0))) (&&(-> ([=] (-V- Z0_2) 0) (next (release ([=] (-V- Z1_2) 0) ([>] (-V- Z0_2) 0)))) (-> ([=] (-V- Z1_2) 0) (next (release ([=] (-V- Z0_2) 0) ([>] (-V- Z1_2) 0))))))) (alwf (&&(<-> (-P- P_2) (!! (-P- P_0))) (<-> (-P- H_2) (!! (-P- H_0))))))))))))

:smt-lib :smt2 
:logic :QF_UFRDL 
:over-clocks 3 
:gen-symbolic-val nil
:parametric-regions t
:discrete-counters '())

