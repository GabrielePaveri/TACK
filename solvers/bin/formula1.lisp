(asdf:operate 'asdf:load-op 'ae2zot) (use-package :trio-utils)
(define-tvar z0_5 *real*)
(define-tvar H_5 *real*)
(define-tvar H_5 *real*)
(define-tvar H_5 *real*)
(define-tvar H_5 *real*)
(define-tvar z0_5 *real*)
(define-tvar z1_5 *real*)
(define-tvar z0_5 *real*)
(define-tvar z1_5 *real*)
(define-tvar z0_5 *real*)
(define-tvar z1_5 *real*)
(define-tvar z0_5 *real*)
(define-tvar z1_5 *real*)
(define-tvar z0_5 *real*)
(define-tvar z0_5 *real*)
(define-tvar z0_5 *real*)
(define-tvar z0_5 *real*)
(define-tvar z1_5 *real*)
(define-tvar z1_5 *real*)
(define-tvar z1_5 *real*)
(define-tvar z1_5 *real*)
(define-tvar z0_5 *real*)
(define-tvar z1_5 *real*)
(define-tvar H_5 *real*)
(define-tvar H_4 *real*)
(define-tvar H_2 *real*)
(&&(&&([=] (-V- z0_5) 0) (&&(alwf (&&(<-> (||(&&(!! (yesterday (-P- H_5))) (-P- H_5)) (&&(yesterday (-P- H_5)) (!! (-P- H_5)))) (||([=] (-V- z0_5) 0) ([=] (-V- z1_5) 0))) (&&(-> ([=] (-V- z0_5) 0) (next (release ([=] (-V- z1_5) 0) ([>] (-V- z0_5) 0)))) (-> ([=] (-V- z1_5) 0) (next (release ([=] (-V- z0_5) 0) ([>] (-V- z1_5) 0))))))) (&&(&&(alwf (||(next ([=] (-V- z0_5) 0)) (next ([>] (-V- z0_5) 0)))) (||(alwf (somf ([=] (-V- z0_5) 0))) (somf (alwf ([>] (-V- z0_5) 1000))))) (&&(&&(alwf (||(next ([=] (-V- z1_5) 0)) (next ([>] (-V- z1_5) 0)))) (||(alwf (somf ([=] (-V- z1_5) 0))) (somf (alwf ([>] (-V- z1_5) 1000))))) (&&([>=] (-V- z0_5) 0) ([>=] (-V- z1_5) 0)))))) (alwf (<-> (-P- H_5) (release (-P- H_4) (-P- H_2)))))